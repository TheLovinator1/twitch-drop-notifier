# Generated by Django 5.1 on 2024-08-09 02:49

import auto_prefetch
import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models
from django.db.migrations.operations.base import Operation


class Migration(migrations.Migration):
    initial = True

    dependencies: list[tuple[str, str]] = []

    operations: list[Operation] = [
        migrations.CreateModel(
            name="Benefit",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(null=True)),
                ("entitlement_limit", models.TextField(null=True)),
                ("image_asset_url", models.URLField(blank=True, null=True)),
                ("is_ios_available", models.BooleanField(null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("display_name", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FrontEndChannel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField(blank=True, null=True)),
                ("twitch_url", models.URLField(blank=True, null=True)),
                ("live", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FrontEndGame",
            fields=[
                ("twitch_id", models.TextField(primary_key=True, serialize=False)),
                ("game_url", models.URLField(blank=True, null=True)),
                ("display_name", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FrontEndOrg",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("name", models.TextField(blank=True, null=True)),
                ("url", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("slug", models.TextField(blank=True, null=True)),
                ("display_name", models.TextField(blank=True, null=True)),
                ("box_art_url", models.URLField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("image1_x_url", models.URLField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Owner",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("slug", models.TextField(blank=True, null=True)),
                ("display_name", models.TextField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="UnlockRequirements",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("subs_goal", models.TextField(null=True)),
                ("minute_watched_goal", models.TextField(null=True)),
                ("typename", models.TextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="BenefitEdge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("entitlement_limit", models.TextField(null=True)),
                ("typename", models.TextField(blank=True, null=True)),
                (
                    "benefit",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="benefit_edges",
                        to="core.benefit",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Allow",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_enabled", models.BooleanField(default=True)),
                ("typename", models.TextField(blank=True, null=True)),
                ("channels", models.ManyToManyField(related_name="allow", to="core.channel")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FrontEndDropCampaign",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("account_link_url", models.URLField(blank=True, null=True)),
                ("about_url", models.URLField(blank=True, null=True)),
                ("ends_at", models.DateTimeField(null=True)),
                ("starts_at", models.DateTimeField(null=True)),
                ("channels", models.ManyToManyField(related_name="drop_campaigns", to="core.frontendchannel")),
                (
                    "game",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="drop_campaigns",
                        to="core.frontendgame",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FrontEndDrop",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("image_url", models.URLField(blank=True, null=True)),
                ("limit", models.PositiveBigIntegerField(null=True)),
                ("is_ios_available", models.BooleanField(null=True)),
                ("minutes_watched", models.PositiveBigIntegerField(null=True)),
                (
                    "drop_campaign",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="drops",
                        to="core.frontenddropcampaign",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="frontendgame",
            name="org",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="games",
                to="core.frontendorg",
            ),
        ),
        migrations.AddField(
            model_name="benefit",
            name="game",
            field=auto_prefetch.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="benefits",
                to="core.game",
            ),
        ),
        migrations.AddField(
            model_name="benefit",
            name="owner_organization",
            field=auto_prefetch.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="benefits",
                to="core.owner",
            ),
        ),
        migrations.CreateModel(
            name="Reward",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("name", models.TextField(blank=True, null=True)),
                ("earnable_until", models.DateTimeField(null=True)),
                ("redemption_instructions", models.TextField(blank=True, null=True)),
                ("redemption_url", models.URLField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
                (
                    "banner_image",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="banner_rewards",
                        to="core.image",
                    ),
                ),
                (
                    "thumbnail_image",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="thumbnail_rewards",
                        to="core.image",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TimeBasedDrop",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(null=True)),
                ("entitlement_limit", models.TextField(null=True)),
                ("image_asset_url", models.URLField(blank=True, null=True)),
                ("is_ios_available", models.BooleanField(null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("typename", models.TextField(blank=True, null=True)),
                (
                    "game",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_based_drops",
                        to="core.game",
                    ),
                ),
                (
                    "owner_organization",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_based_drops",
                        to="core.owner",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="DropCampaign",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("account_link_url", models.URLField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("details_url", models.URLField(blank=True, null=True)),
                ("ends_at", models.DateTimeField(null=True)),
                ("image_url", models.URLField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("starts_at", models.DateTimeField(null=True)),
                (
                    "status",
                    models.TextField(blank=True, choices=[("ACTIVE", "Active"), ("EXPIRED", "Expired")], null=True),
                ),
                ("typename", models.TextField(blank=True, null=True)),
                (
                    "allow",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="drop_campaigns",
                        to="core.allow",
                    ),
                ),
                (
                    "game",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="drop_campaigns",
                        to="core.game",
                    ),
                ),
                (
                    "owner",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="drop_campaigns",
                        to="core.owner",
                    ),
                ),
                ("time_based_drops", models.ManyToManyField(related_name="drop_campaigns", to="core.timebaseddrop")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RewardCampaign",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("name", models.TextField(blank=True, null=True)),
                ("brand", models.TextField(blank=True, null=True)),
                ("starts_at", models.DateTimeField(null=True)),
                ("ends_at", models.DateTimeField(null=True)),
                ("status", models.TextField(blank=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("instructions", models.TextField(blank=True, null=True)),
                ("external_url", models.URLField(blank=True, null=True)),
                ("reward_value_url_param", models.TextField(blank=True, null=True)),
                ("about_url", models.URLField(blank=True, null=True)),
                ("is_sitewide", models.BooleanField(null=True)),
                ("typename", models.TextField(blank=True, null=True)),
                (
                    "game",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reward_campaigns",
                        to="core.game",
                    ),
                ),
                (
                    "image",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reward_campaigns",
                        to="core.image",
                    ),
                ),
                ("rewards", models.ManyToManyField(related_name="reward_campaigns", to="core.reward")),
                (
                    "unlock_requirements",
                    auto_prefetch.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reward_campaigns",
                        to="core.unlockrequirements",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            managers=[
                ("objects", django.db.models.manager.Manager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
    ]
